{"version":3,"sources":["connections/socket.js","sites/join-game.js","model/game.js","sites/join-room.js","context/color-context.js","sites/main.js","App.js","reportWebVitals.js","index.js"],"names":["mySocketId","port","process","PORT","URL","socket","io","on","status","console","log","userName","gameId","require","JoinGame","props","gameid","isHost","idData","emit","JoinGameRoom","useParams","style","textAlign","url","Game","state","host","choiceHost","choiceGuest","scoreHost","scoreGuest","this","choice","React","Component","GameWrapper","useState","setOpponentSocketId","opponentDidJoinTheGame","didJoinGame","opponentUserName","setUserName","gameSessionDoesNotExist","doesntExist","useEffect","statusUpdate","id","alert","myUserName","socketId","data","Fragment","display","marginTop","String","window","innerHeight","marginLeft","innerWidth","width","height","onFocus","event","target","select","value","type","readOnly","JoinRoom","didGetUserName","inputText","typingUserName","typedText","textArea","current","setState","createRef","ref","onInput","className","disabled","length","onClick","ColorContext","createContext","didRedirect","playerDidRedirect","playerDidNotRedirect","CreateNewGame","send","newGameRoomId","uuid","to","Main","color","useContext","App","setDidRedirect","useCallback","Provider","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26421e7e.chunk.js","sourcesContent":["import io from 'socket.io-client';\n\nconst port = process.env.PORT || 8000;\nconst URL = process.env.URL || `localhost:${port}`;\n\nconst socket = io(URL);\n\nlet mySocketId;\n\nsocket.on('createNewGame', status => {\n\tconsole.log(\"A new game has been created! Username: \" + status.userName + \", Game id: \" + status.gameId + \" Socket id: \" + status.mySocketId);\n\tmySocketId = status.mySocketId;\n})\n\nexport {\n\tsocket,\n\tmySocketId\n};\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\n\nconst socket  = require('../connections/socket').socket;\n\n/**\n * 'Join game' is where we actually join the game room. \n */\n\n\nconst JoinGameRoom = (gameid, userName, isHost) => {\n\t/**\n\t * For this browser instance, we want \n\t * to join it to a gameRoom. For now\n\t * assume that the game room exists \n\t * on the backend. \n\t *  \n\t * \n\t * TODO: handle the case when the game room doesn't exist. \n\t */\n\tconst idData = {\n\t\tgameId : gameid,\n\t\tuserName : userName,\n\t\tisHost: isHost\n\t};\n\tsocket.emit(\"playerJoinGame\", idData);\n}\n  \n  \nconst JoinGame = (props) => {\n\t/**\n\t * Extract the 'gameId' from the URL. \n\t * the 'gameId' is the gameRoom ID. \n\t */\n\tconst { gameid } = useParams();\n\tJoinGameRoom(gameid, props.userName, props.isHost);\n\n\treturn <div>\n\t\t<h1 style = {{textAlign: \"center\"}}>Rock, paper, scissors</h1>\n\t</div>\n}\n\nexport default JoinGame;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst socket = require('../connections/socket').socket;\n\nconst port = process.env.PORT || 8000;\nconst url = process.env.URL || `localhost:${port}`;\nconsole.log(process.env.URL);\n\n\nclass Game extends React.Component {\n\tstate = {\n\t\thost: this.props.isHost,\n\n\t\tchoiceHost: -1,\n\t\tchoiceGuest: -1,\n\n\t\tscoreHost: 0,\n\t\tscoreGuest: 0\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log('props:', this.props);\n\t\tconsole.log(this.state);\n\t}\n\n\t/**\n\t * Passes information about player's choice to the game.\n\t * @param {boolean} isHost \n\t * @param {0|1|2} choice (0 - rock), (1 - paper), (2 - scissors).\n\t */\n\tchoose(isHost, choice) {\n\t\tif (isHost)\n\t\t\tthis.choiceHost = choice;\n\t\telse\n\t\t\tthis.choiceGuest = choice;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tSuch game, much wow.\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst GameWrapper = (props) => {\n\t/**\n\t * player 1\n\t *      - socketId 1\n\t *      - socketId 2 ???\n\t * player 2\n\t *      - socketId 2\n\t *      - socketId 1\n\t */\n\n\n\n\t// const color = React.useContext(ColorContext);\n\tconst { gameid } = useParams();\n\tconst [opponentSocketId, setOpponentSocketId] = React.useState('');\n\tconst [opponentDidJoinTheGame, didJoinGame] = React.useState(false);\n\tconst [opponentUserName, setUserName] = React.useState('');\n\tconst [gameSessionDoesNotExist, doesntExist] = React.useState(false);\n\n\tReact.useEffect(() => {\n\t\tsocket.on(\"playerJoinedRoom\", statusUpdate => {\n\t\t\tconsole.log(\n\t\t\t\t\"A new player has joined the room! Username: \" +\n\t\t\t\tstatusUpdate.userName + \", Game id: \" + statusUpdate.gameId + \" Socket id: \" + statusUpdate.mySocketId\n\t\t\t);\n\t\t\tif (socket.id !== statusUpdate.mySocketId) {\n\t\t\t\tsetOpponentSocketId(statusUpdate.mySocketId);\n\t\t\t}\n\t\t})\n\n\t\tsocket.on(\"status\", statusUpdate => {\n\t\t\tconsole.log(statusUpdate);\n\t\t\talert(statusUpdate);\n\t\t\tif (statusUpdate === 'This game session does not exist.' || statusUpdate === 'There are already 2 people playing in this room.') {\n\t\t\t\tdoesntExist(true);\n\t\t\t}\n\t\t})\n\t\t\n\n\t\tsocket.on('start game', (opponentUserName) => {\n\t\t\tconsole.log(\"START!\");\n\t\t\tif (opponentUserName !== props.myUserName) {\n\t\t\t\tsetUserName(opponentUserName);\n\t\t\t\tdidJoinGame(true);\n\t\t\t} else {\n\t\t\t\t// in chessGame, pass opponentUserName as a prop and label it as the enemy. \n\t\t\t\t// in chessGame, use reactContext to get your own userName\n\t\t\t\t// socket.emit('myUserName')\n\t\t\t\tsocket.emit('request username', gameid);\n\t\t\t}\n\t\t})\n\n\n\t\tsocket.on('give userName', (socketId) => {\n\t\t\tif (socket.id !== socketId) {\n\t\t\t\tconsole.log(\"give userName stage: \" + props.myUserName);\n\t\t\t\tsocket.emit('recieved userName', {userName: props.myUserName, gameId: gameid});\n\t\t\t}\n\t\t})\n\n\t\tsocket.on('get Opponent UserName', (data) => {\n\t\t\tif (socket.id !== data.socketId) {\n\t\t\t\tsetUserName(data.userName);\n\t\t\t\tconsole.log('data.socketId: data.socketId');\n\t\t\t\tsetOpponentSocketId(data.socketId);\n\t\t\t\tdidJoinGame(true);\n\t\t\t}\n\t\t})\n\t}, []);\n\n\n\treturn (\n\t\t<React.Fragment>\n\t\t{opponentDidJoinTheGame ? (\n\t\t\t<div>\n\t\t\t<h4> Opponent: {opponentUserName} </h4>\n\t\t\t<div style={{ display: \"flex\" }}>\n\t\t\t\t<Game gameId={gameid}/>\n\t\t\t</div>\n\t\t\t<h4> You: {props.myUserName} </h4>\n\t\t\t</div>\n\t\t) : gameSessionDoesNotExist ? (\n\t\t\t<div>\n\t\t\t<h1 style={{ textAlign: \"center\", marginTop: \"200px\" }}> :( </h1>\n\t\t\t</div>\n\t\t) : (\n\t\t\t<div>\n\t\t\t<h1\n\t\t\t\tstyle={{\n\t\t\t\ttextAlign: \"center\",\n\t\t\t\tmarginTop: String(window.innerHeight / 8) + \"px\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tHey <strong>{props.myUserName}</strong>, copy and paste the URL\n\t\t\t\tbelow to send to your friend:\n\t\t\t</h1>\n\t\t\t<textarea\n\t\t\t\tstyle={{ marginLeft: String((window.innerWidth / 2) - 290) + \"px\", marginTop: \"30px\", width: \"580px\", height: \"30px\"}}\n\t\t\t\tonFocus={(event) => {\n\t\t\t\t\tevent.target.select();\n\t\t\t\t}}\n\t\t\t\tvalue = {url + \"/game/\" + gameid}\n\t\t\t\ttype = \"text\"\n\t\t\t\treadOnly = {true}>\n\t\t\t\t</textarea>\n\t\t\t<br></br>\n\n\t\t\t<h1 style={{ textAlign: \"center\", marginTop: \"100px\" }}>\n\t\t\t\t{\" \"}\n\t\t\t\tWaiting for other opponent to join the game...{\" \"}\n\t\t\t</h1>\n\t\t\t</div>\n\t\t)}\n\t\t</React.Fragment>\n\t);\n};\n\nexport default GameWrapper\n","import React from 'react'\nimport JoinGame from './join-game'\nimport Game from '../model/game'\n\n\n/**\n * Onboard is where we create the game room.\n */\n\nclass JoinRoom extends React.Component {\n\tstate = {\n\t\tdidGetUserName: false,\n\t\tinputText: ''\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.textArea = React.createRef();\n\t}\n\n\ttypingUserName = () => {\n\t\t// grab the input text from the field from the DOM \n\t\tconst typedText = this.textArea.current.value\n\t\t\n\t\t// set the state with that text\n\t\tthis.setState({\n\t\t\tinputText: typedText\n\t\t})\n\t}\n\n    render() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t{\n\t\t\t\tthis.state.didGetUserName ? \n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<JoinGame userName = {this.state.inputText} isHost = {false}/>\n\t\t\t\t\t<Game myUserName = {this.state.inputText} isHost = {false}/>\n\t\t\t\t</React.Fragment>\n\t\t\t:\n\t\t\t\t<div>\n\t\t\t\t\t<h1 style={{textAlign: \"center\", marginTop: String((window.innerHeight / 3)) + \"px\"}}>Your Username:</h1>\n\n\t\t\t\t\t<input style={{marginLeft: String((window.innerWidth / 2) - 120) + \"px\", width: \"240px\", marginTop: \"62px\"}} \n\t\t\t\t\t\t\tref = {this.textArea}\n\t\t\t\t\t\t\tonInput = {this.typingUserName}></input>\n\t\t\t\t\t\t\t\n\t\t\t\t\t<button className=\"btn btn-primary\" \n\t\t\t\t\t\tstyle = {{marginLeft: String((window.innerWidth / 2) - 60) + \"px\", width: \"120px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tdisabled = {!(this.state.inputText.length > 0)} \n\t\t\t\t\t\tonClick = {() => {\n\t\t\t\t\t\t\t// When the 'Submit' button gets pressed from the username screen,\n\t\t\t\t\t\t\t// We should send a request to the server to create a new room with\n\t\t\t\t\t\t\t// the uuid we generate here.\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tdidGetUserName: true\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}}>Submit</button>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t</React.Fragment>\n\t\t);\n    }\n}\n\nexport default JoinRoom;\n","import { createContext } from 'react'\n\nexport const ColorContext = createContext({\n    didRedirect: false, \n    playerDidRedirect: () => {}, \n    playerDidNotRedirect: () => {}\n});\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport uuid from 'uuid/v4'\nimport { ColorContext } from '../context/color-context' \n\nconst socket = require('../connections/socket').socket;\n\n/**\n * Main is where we create the game room.\n */\n\nclass CreateNewGame extends React.Component {\n\tstate = {\n\t\tdidGetUserName: false,\n\t\tinputText: '',\n\t\tgameId: ''\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.textArea = React.createRef();\n\t}\n\n\tsend = () => {\n\t\t/**\n\t\t * This method should create a new room in the '/' namespace\n\t\t * with a unique identifier. \n\t\t */\n\t\tconst newGameRoomId = uuid();\n\n\t\t// set the state of this component with the gameId so that we can\n\t\t// redirect the user to that URL later. \n\t\tthis.setState({\n\t\t\tgameId: newGameRoomId\n\t\t});\n\n\t\t// emit an event to the server to create a new room \n\t\tsocket.emit('createNewGame', newGameRoomId);\n\t}\n\n\ttypingUserName = () => {\n\t\t// grab the input text from the field from the DOM \n\t\tconst typedText = this.textArea.current.value;\n\t\t\n\t\t// set the state with that text\n\t\tthis.setState({\n\t\t\tinputText: typedText\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t{\n\t\t\t\tthis.state.didGetUserName ?\n\t\t\t\t<Redirect to = {\"/game/\" + this.state.gameId}>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn btn-success\"\n\t\t\t\t\t\tstyle = {{marginLeft: String((window.innerWidth / 2) - 60) + \"px\", width: \"120px\"}}\n\t\t\t\t\t>Start Game</button> \n\t\t\t\t</Redirect>\n\n\t\t\t:\n\n\t\t\t\t<div>\n\t\t\t\t\t<h1 style={{textAlign: \"center\", marginTop: String((window.innerHeight / 3)) + \"px\"}}>Your Username:</h1>\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{marginLeft: String((window.innerWidth / 2) - 120) + \"px\", width: \"240px\", marginTop: \"62px\"}}\n\t\t\t\t\t\tref = {this.textArea}\n\t\t\t\t\t\tonInput = {this.typingUserName}></input>\n\t\t\t\t\t\t\t\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\tstyle = {{marginLeft: String((window.innerWidth / 2) - 60) + \"px\", width: \"120px\", marginTop: \"62px\"}}\n\t\t\t\t\t\tdisabled = {!(this.state.inputText.length > 0)}\n\t\t\t\t\t\tonClick = {() => {\n\t\t\t\t\t\t\t// When the 'Submit' button gets pressed from the username screen,\n\t\t\t\t\t\t\t// We should send a request to the server to create a new room with\n\t\t\t\t\t\t\t// the uuid we generate here.\n\t\t\t\t\t\t\tthis.props.didRedirect();\n\t\t\t\t\t\t\tthis.props.setUserName(this.state.inputText);\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tdidGetUserName: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthis.send();\n\t\t\t\t\t\t}}>Submit</button>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nconst Main = (props) => {\n    const color = React.useContext(ColorContext);\n\n    return <CreateNewGame didRedirect = {color.playerDidRedirect} setUserName = {props.setUserName}/>\n}\n\n\nexport default Main;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport JoinRoom from './sites/join-room'\nimport { ColorContext } from './context/color-context'\nimport Main from './sites/main'\nimport JoinGame from './sites/join-game'\nimport Game from './model/game'\n\n/*\n *  Frontend flow: \n * \n * 1. user first opens this app in the browser. \n * 2. a screen appears asking the user to send their friend their game URL to start the game.\n * 3. the user sends their friend their game URL\n * 4. the user clicks the 'start' button and waits for the other player to join. \n * 5. As soon as the other player joins, the game starts. \n * \n * \n * Other player flow:\n * 1. user gets the link sent by their friend\n * 2. user clicks on the link and it redirects to their game. If the 'host' has not yet \n *    clicked the 'start' button yet, the user will wait for when the host clicks the start button.  \n *    If the host decides to leave before they click on the \"start\" button, the user will be notified\n *    that the host has ended the session. \n * 3. Once the host clicks the start button or the start button was already clicked on\n *    before, that's when the game starts. \n * Onboarding screen =====> Game start. \n * \n * Every time a user opens our site from the '/' path, a new game instance is automatically created\n * on the back-end. We should generate the uuid on the frontend, send the request with the uuid\n * as a part of the body of the request. If any player leaves, then the other player wins automatically.  \n * \n */\n\n\nfunction App() {\n\tconst [didRedirect, setDidRedirect] = React.useState(false);\n\n\tconst playerDidRedirect = React.useCallback(() => {\n\t\tsetDidRedirect(true);\n\t}, []);\n\n\tconst playerDidNotRedirect = React.useCallback(() => {\n\t\tsetDidRedirect(false);\n\t}, []);\n\n\tconst [userName, setUserName] = React.useState('');\n\n\treturn (\n\t<ColorContext.Provider value = {{didRedirect: didRedirect, playerDidRedirect: playerDidRedirect, playerDidNotRedirect: playerDidNotRedirect}}>\n\t\t<Router>\n\t\t<Switch>\n\t\t\t<Route path = \"/\" exact>\n\t\t\t\t<Main setUserName = {setUserName}/>\n\t\t\t</Route>\n\t\t\t<Route path = \"/game/:gameid\" exact>\n\t\t\t\t{didRedirect ? \n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<JoinGame userName = {userName} isHost = {true} />\n\t\t\t\t\t<Game myUserName = {userName} isHost = {true} />\n\t\t\t\t</React.Fragment>\n\t\t\t\t:\n\t\t\t\t<JoinRoom />}\n\t\t\t</Route>\n\t\t\t<Redirect to = \"/\" />\n\t\t</Switch>\n\t\t</Router>\n\t</ColorContext.Provider>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}