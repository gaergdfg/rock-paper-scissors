{"version":3,"sources":["sites/join-game.js","model/game.js","cookie-manager.js","sites/join-room.js","context/color-context.js","sites/main.js","App.js","reportWebVitals.js","index.js","connections/socket.js"],"names":["socket","require","JoinGame","props","gameid","userName","isHost","idData","gameId","emit","JoinGameRoom","useParams","style","textAlign","Game","process","PORT","state","host","choiceHost","choiceGuest","scoreHost","scoreGuest","console","log","this","choice","React","Component","GameWrapper","useState","setOpponentSocketId","opponentDidJoinTheGame","didJoinGame","opponentUserName","setUserName","gameSessionDoesNotExist","doesntExist","useEffect","on","statusUpdate","mySocketId","id","alert","myUserName","socketId","data","Fragment","display","marginTop","String","window","innerHeight","marginLeft","innerWidth","width","height","onFocus","event","target","select","value","url","type","readOnly","cookies","Cookies","axios","JoinRoom","didGetUserName","username","inputEmail","inputPassword","inputText","typingEmail","typedText","email","current","setState","typingPassword","password","typingUserName","textArea","createRef","ref","onInput","className","disabled","length","onClick","post","hubUrl","passwordHash","sha1","then","response","set","path","catch","err","ColorContext","createContext","didRedirect","playerDidRedirect","playerDidNotRedirect","CreateNewGame","send","newGameRoomId","uuid","to","a","roomId","Main","color","useContext","App","setDidRedirect","useCallback","Provider","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","io","status"],"mappings":"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","file":"static/js/main.5a0eb04a.chunk.js","sourcesContent":["import React from 'react'\nimport { useParams } from 'react-router-dom'\n\nconst socket  = require('../connections/socket').socket;\n\n/**\n * 'Join game' is where we actually join the game room. \n */\n\n\nconst JoinGameRoom = (gameid, userName, isHost) => {\n\t/**\n\t * For this browser instance, we want \n\t * to join it to a gameRoom. For now\n\t * assume that the game room exists \n\t * on the backend. \n\t *  \n\t * \n\t * TODO: handle the case when the game room doesn't exist. \n\t */\n\tconst idData = {\n\t\tgameId : gameid,\n\t\tuserName : userName,\n\t\tisHost: isHost\n\t};\n\tsocket.emit(\"playerJoinGame\", idData);\n}\n\n\nconst JoinGame = (props) => {\n\t/**\n\t * Extract the 'gameId' from the URL. \n\t * the 'gameId' is the gameRoom ID. \n\t */\n\tconst { gameid } = useParams();\n\tJoinGameRoom(gameid, props.userName, props.isHost);\n\n\treturn <div>\n\t\t<h1 style = {{textAlign: \"center\"}}>Rock, paper, scissors</h1>\n\t</div>\n}\n\nexport default JoinGame;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst socket = require('../connections/socket').socket;\n\nconst port = process.env.PORT || 8000;\n// const url = process.env.URL || `localhost:${port}`;\nconst url = 'https://game-nexus-rps.herokuapp.com';\n\n\nclass Game extends React.Component {\n\tstate = {\n\t\thost: this.props.isHost,\n\n\t\tchoiceHost: -1,\n\t\tchoiceGuest: -1,\n\n\t\tscoreHost: 0,\n\t\tscoreGuest: 0\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log('props:', this.props);\n\t\tconsole.log(this.state);\n\t}\n\n\t/**\n\t * Passes information about player's choice to the game.\n\t * @param {boolean} isHost \n\t * @param {0|1|2} choice (0 - rock), (1 - paper), (2 - scissors).\n\t */\n\tchoose(isHost, choice) {\n\t\tif (isHost)\n\t\t\tthis.choiceHost = choice;\n\t\telse\n\t\t\tthis.choiceGuest = choice;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tSuch game, much wow.\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst GameWrapper = (props) => {\n\t/**\n\t * player 1\n\t *      - socketId 1\n\t *      - socketId 2 ???\n\t * player 2\n\t *      - socketId 2\n\t *      - socketId 1\n\t */\n\n\n\n\t// const color = React.useContext(ColorContext);\n\tconst { gameid } = useParams();\n\tconst [opponentSocketId, setOpponentSocketId] = React.useState('');\n\tconst [opponentDidJoinTheGame, didJoinGame] = React.useState(false);\n\tconst [opponentUserName, setUserName] = React.useState('');\n\tconst [gameSessionDoesNotExist, doesntExist] = React.useState(false);\n\n\tReact.useEffect(() => {\n\t\tsocket.on(\"playerJoinedRoom\", statusUpdate => {\n\t\t\tconsole.log(\n\t\t\t\t\"A new player has joined the room! Username: \" +\n\t\t\t\tstatusUpdate.userName + \", Game id: \" + statusUpdate.gameId + \" Socket id: \" + statusUpdate.mySocketId\n\t\t\t);\n\t\t\tif (socket.id !== statusUpdate.mySocketId) {\n\t\t\t\tsetOpponentSocketId(statusUpdate.mySocketId);\n\t\t\t}\n\t\t})\n\n\t\tsocket.on(\"status\", statusUpdate => {\n\t\t\tconsole.log(statusUpdate);\n\t\t\talert(statusUpdate);\n\t\t\tif (statusUpdate === 'This game session does not exist.' || statusUpdate === 'There are already 2 people playing in this room.') {\n\t\t\t\tdoesntExist(true);\n\t\t\t}\n\t\t})\n\t\t\n\n\t\tsocket.on('start game', (opponentUserName) => {\n\t\t\tconsole.log(\"START!\");\n\t\t\tif (opponentUserName !== props.myUserName) {\n\t\t\t\tsetUserName(opponentUserName);\n\t\t\t\tdidJoinGame(true);\n\t\t\t} else {\n\t\t\t\t// in chessGame, pass opponentUserName as a prop and label it as the enemy. \n\t\t\t\t// in chessGame, use reactContext to get your own userName\n\t\t\t\t// socket.emit('myUserName')\n\t\t\t\tsocket.emit('request username', gameid);\n\t\t\t}\n\t\t})\n\n\n\t\tsocket.on('give userName', (socketId) => {\n\t\t\tif (socket.id !== socketId) {\n\t\t\t\tconsole.log(\"give userName stage: \" + props.myUserName);\n\t\t\t\tsocket.emit('recieved userName', {userName: props.myUserName, gameId: gameid});\n\t\t\t}\n\t\t})\n\n\t\tsocket.on('get Opponent UserName', (data) => {\n\t\t\tif (socket.id !== data.socketId) {\n\t\t\t\tsetUserName(data.userName);\n\t\t\t\tconsole.log('data.socketId: data.socketId');\n\t\t\t\tsetOpponentSocketId(data.socketId);\n\t\t\t\tdidJoinGame(true);\n\t\t\t}\n\t\t})\n\t}, []);\n\n\n\treturn (\n\t\t<React.Fragment>\n\t\t{opponentDidJoinTheGame ? (\n\t\t\t<div>\n\t\t\t<h4> Opponent: {opponentUserName} </h4>\n\t\t\t<div style={{ display: \"flex\" }}>\n\t\t\t\t<Game gameId={gameid}/>\n\t\t\t</div>\n\t\t\t<h4> You: {props.myUserName} </h4>\n\t\t\t</div>\n\t\t) : gameSessionDoesNotExist ? (\n\t\t\t<div>\n\t\t\t<h1 style={{ textAlign: \"center\", marginTop: \"200px\" }}> :( </h1>\n\t\t\t</div>\n\t\t) : (\n\t\t\t<div>\n\t\t\t<h1\n\t\t\t\tstyle={{\n\t\t\t\ttextAlign: \"center\",\n\t\t\t\tmarginTop: String(window.innerHeight / 8) + \"px\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tHey <strong>{props.myUserName}</strong>, copy and paste the URL\n\t\t\t\tbelow to send to your friend:\n\t\t\t</h1>\n\t\t\t<textarea\n\t\t\t\tstyle={{ marginLeft: String((window.innerWidth / 2) - 290) + \"px\", marginTop: \"30px\", width: \"580px\", height: \"30px\"}}\n\t\t\t\tonFocus={(event) => {\n\t\t\t\t\tevent.target.select();\n\t\t\t\t}}\n\t\t\t\tvalue = {url + \"/game/\" + gameid}\n\t\t\t\ttype = \"text\"\n\t\t\t\treadOnly = {true}>\n\t\t\t\t</textarea>\n\t\t\t<br></br>\n\n\t\t\t<h1 style={{ textAlign: \"center\", marginTop: \"100px\" }}>\n\t\t\t\t{\" \"}\n\t\t\t\tWaiting for other opponent to join the game...{\" \"}\n\t\t\t</h1>\n\t\t\t</div>\n\t\t)}\n\t\t</React.Fragment>\n\t);\n};\n\nexport default GameWrapper\n","import Cookies from 'universal-cookie';\nconst cookies = new Cookies();\nexport {cookies};\n","import React from 'react';\nimport JoinGame from './join-game';\nimport Game from '../model/game';\nimport sha1 from 'sha1';\nimport { cookies } from '../cookie-manager';\n\nconst axios = require('axios');\n\n\nconst hubUrl = 'https://game-nexus.herokuapp.com/';\n\n\n/**\n * Onboard is where we create the game room.\n */\n\nclass JoinRoom extends React.Component {\n\tstate = {\n\t\tdidGetUserName: false,\n\t\tusername: '',\n\t\tinputEmail: '',\n\t\tinputPassword: '',\n\t\tinputText: ''\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.email = React.createRef();\n\t\tthis.password = React.createRef();\n\n\t\tthis.textArea = React.createRef();\n\t}\n\n\ttypingEmail = () => {\n\t\t// grab the input text from the field from the DOM \n\t\tconst typedText = this.email.current.value\n\t\t\n\t\t// set the state with that text\n\t\tthis.setState({\n\t\t\tinputEmail: typedText\n\t\t})\n\t}\n\n\ttypingPassword = () => {\n\t\t// grab the input text from the field from the DOM \n\t\tconst typedText = this.password.current.value\n\t\t\n\t\t// set the state with that text\n\t\tthis.setState({\n\t\t\tinputPassword: typedText\n\t\t})\n\t}\n\n\ttypingUserName = () => {\n\t\t// grab the input text from the field from the DOM \n\t\tconst typedText = this.textArea.current.value\n\t\t\n\t\t// set the state with that text\n\t\tthis.setState({\n\t\t\tinputText: typedText\n\t\t})\n\t}\n\n    render() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t{\n\t\t\t\tthis.state.didGetUserName ? \n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<JoinGame userName = {this.state.username} isHost = {false}/>\n\t\t\t\t\t<Game myUserName = {this.state.username} isHost = {false}/>\n\t\t\t\t</React.Fragment>\n\t\t\t:\n\t\t\t\t<div>\n\t\t\t\t\t<h1 style={{textAlign: \"center\", marginTop: String((window.innerHeight / 3)) + \"px\"}}>Log in:</h1>\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{marginLeft: String((window.innerWidth / 2) - 120) + \"px\", width: \"240px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tref={this.email}\n\t\t\t\t\t\tonInput={this.typingEmail}></input>\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{marginLeft: String((window.innerWidth / 2) - 120) + \"px\", width: \"240px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tref={this.password}\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tonInput={this.typingPassword}></input>\n\n\t\t\t\t\t<button className=\"btn btn-primary\" \n\t\t\t\t\t\tstyle = {{marginLeft: String((window.innerWidth / 2) - 60) + \"px\", width: \"120px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tdisabled = {!(this.state.inputEmail.length > 0 && this.state.inputPassword.length > 0)} \n\t\t\t\t\t\tonClick = {() => {\n\t\t\t\t\t\t\tconsole.log('logging in');\n\t\t\t\t\t\t\taxios.post(hubUrl + 'api/v1/validate/', {\n\t\t\t\t\t\t\t\temail: this.state.inputEmail,\n\t\t\t\t\t\t\t\tpasswordHash: sha1(this.state.inputPassword)\n\t\t\t\t\t\t\t}).then(response => {\n\t\t\t\t\t\t\t\tconsole.log('got response:', response);\n\t\t\t\t\t\t\t\tcookies.set('username', response.data.username.username, { path: '/' });\n\t\t\t\t\t\t\t\t// TODO: remove this cookie right as the game ends\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tusername: response.data.username.username,\n\t\t\t\t\t\t\t\t\tdidGetUserName: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}).catch(err => {\n\t\t\t\t\t\t\t\talert('Invalid credentials!');\n\t\t\t\t\t\t\t\tconsole.log('got error:', err.response);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}}>Submit</button>\n\n\n\t\t\t\t\t<h1 style={{textAlign: \"center\", marginTop: String((window.innerHeight / 3)) + \"px\"}}>Play as guest:</h1>\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{marginLeft: String((window.innerWidth / 2) - 120) + \"px\", width: \"240px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tref = {this.textArea}\n\t\t\t\t\t\tonInput = {this.typingUserName}></input>\n\n\t\t\t\t\t<button className=\"btn btn-primary\" \n\t\t\t\t\t\tstyle = {{marginLeft: String((window.innerWidth / 2) - 60) + \"px\", width: \"120px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tdisabled = {!(this.state.inputText.length > 0)} \n\t\t\t\t\t\tonClick = {() => {\n\t\t\t\t\t\t\t// When the 'Submit' button gets pressed from the username screen,\n\t\t\t\t\t\t\t// We should send a request to the server to create a new room with\n\t\t\t\t\t\t\t// the uuid we generate here.\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tusername: this.state.inputText,\n\t\t\t\t\t\t\t\tdidGetUserName: true\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}}>Submit</button>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t</React.Fragment>\n\t\t);\n    }\n}\n\nexport default JoinRoom;\n","import { createContext } from 'react'\n\nexport const ColorContext = createContext({\n    didRedirect: false, \n    playerDidRedirect: () => {}, \n    playerDidNotRedirect: () => {}\n});\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport uuid from 'uuid/v4';\nimport { ColorContext } from '../context/color-context';\nimport sha1 from 'sha1';\nimport { cookies } from '../cookie-manager';\n\nconst socket = require('../connections/socket').socket;\nconst axios = require('axios');\n\n\nconst hubUrl = 'https://game-nexus.herokuapp.com/';\n\n/**\n * Main is where we create the game room.\n */\n\nclass CreateNewGame extends React.Component {\n\tstate = {\n\t\tdidGetUserName: false,\n\t\tinputEmail: '',\n\t\tinputPassword: '',\n\t\tinputText: '',\n\t\tgameId: ''\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.email = React.createRef();\n\t\tthis.password = React.createRef();\n\n\t\tthis.textArea = React.createRef();\n\t}\n\n\tsend = () => {\n\t\t/**\n\t\t * This method should create a new room in the '/' namespace\n\t\t * with a unique identifier. \n\t\t */\n\t\tconst newGameRoomId = uuid();\n\n\t\t// emit an event to the server to create a new room \n\t\tsocket.emit('createNewGame', newGameRoomId);\n\n\t\treturn newGameRoomId;\n\t}\n\n\ttypingEmail = () => {\n\t\t// grab the input text from the field from the DOM \n\t\tconst typedText = this.email.current.value\n\t\t\n\t\t// set the state with that text\n\t\tthis.setState({\n\t\t\tinputEmail: typedText\n\t\t})\n\t}\n\n\ttypingPassword = () => {\n\t\t// grab the input text from the field from the DOM \n\t\tconst typedText = this.password.current.value\n\t\t\n\t\t// set the state with that text\n\t\tthis.setState({\n\t\t\tinputPassword: typedText\n\t\t})\n\t}\n\n\ttypingUserName = () => {\n\t\t// grab the input text from the field from the DOM \n\t\tconst typedText = this.textArea.current.value;\n\t\t\n\t\t// set the state with that text\n\t\tthis.setState({\n\t\t\tinputText: typedText\n\t\t});\n\t}\n\n\trender() {\n\t\tconsole.log(this.state)\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t{\n\t\t\t\tthis.state.didGetUserName ?\n\n\t\t\t\t<Redirect to = {\"/game/\" + this.state.gameId}/>\n\n\t\t\t:\n\n\t\t\t\t<div>\n\t\t\t\t\t<h1 style={{textAlign: \"center\", marginTop: String((window.innerHeight / 3)) + \"px\"}}>Log in:</h1>\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{marginLeft: String((window.innerWidth / 2) - 120) + \"px\", width: \"240px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tref = {this.email}\n\t\t\t\t\t\tonInput = {this.typingEmail}></input>\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{marginLeft: String((window.innerWidth / 2) - 120) + \"px\", width: \"240px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tref = {this.password}\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tonInput = {this.typingPassword}></input>\n\n\t\t\t\t\t<button className=\"btn btn-primary\" \n\t\t\t\t\t\tstyle = {{marginLeft: String((window.innerWidth / 2) - 60) + \"px\", width: \"120px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tdisabled = {!(this.state.inputEmail.length > 0 && this.state.inputPassword.length > 0)} \n\t\t\t\t\t\tonClick = {async () => {\n\t\t\t\t\t\t\tconsole.log('logging in');\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst response = await axios.post(hubUrl + 'api/v1/validate/', {\n\t\t\t\t\t\t\t\t\temail: this.state.inputEmail,\n\t\t\t\t\t\t\t\t\tpasswordHash: sha1(this.state.inputPassword)\n\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t\tconsole.log('got response:', response.data.username.username);\n\t\t\t\t\t\t\t\tcookies.set('username', response.data.username.username, { path: '/' });\n\t\t\t\t\t\t\t\t// TODO: remove this cookie right as the game ends\n\t\t\t\t\t\t\t\tthis.props.didRedirect();\n\t\t\t\t\t\t\t\tthis.props.setUserName(response.data.username.username);\n\t\t\t\t\t\t\t\tlet roomId = this.send();\n\n\t\t\t\t\t\t\t\t// set the state of this component with the gameId so that we can\n\t\t\t\t\t\t\t\t// redirect the user to that URL later. \n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tdidGetUserName: true,\n\t\t\t\t\t\t\t\t\tgameId: roomId\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\talert('Invalid credentials!');\n\t\t\t\t\t\t\t\tconsole.log('got error:', err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}>Submit</button>\n\n\t\t\t\t\t<h1 style={{textAlign: \"center\", marginTop: String((window.innerHeight / 3)) + \"px\"}}>Play as guest:</h1>\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{marginLeft: String((window.innerWidth / 2) - 120) + \"px\", width: \"240px\", marginTop: \"62px\"}}\n\t\t\t\t\t\tref = {this.textArea}\n\t\t\t\t\t\tonInput = {this.typingUserName}></input>\n\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\tstyle = {{marginLeft: String((window.innerWidth / 2) - 60) + \"px\", width: \"120px\", marginTop: \"62px\"}}\n\t\t\t\t\t\tdisabled = {!(this.state.inputText.length > 0)}\n\t\t\t\t\t\tonClick = {() => {\n\t\t\t\t\t\t\t// When the 'Submit' button gets pressed from the username screen,\n\t\t\t\t\t\t\t// We should send a request to the server to create a new room with\n\t\t\t\t\t\t\t// the uuid we generate here.\n\t\t\t\t\t\t\tthis.props.didRedirect();\n\t\t\t\t\t\t\tthis.props.setUserName(this.state.inputText);\n\t\t\t\t\t\t\tlet roomId = this.send();\n\n\t\t\t\t\t\t\t// set the state of this component with the gameId so that we can\n\t\t\t\t\t\t\t// redirect the user to that URL later. \n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tdidGetUserName: true,\n\t\t\t\t\t\t\t\tgameId: roomId\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}>Submit</button>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nconst Main = (props) => {\n    const color = React.useContext(ColorContext);\n\n    return <CreateNewGame didRedirect = {color.playerDidRedirect} setUserName = {props.setUserName}/>\n}\n\n\nexport default Main;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport JoinRoom from './sites/join-room'\nimport { ColorContext } from './context/color-context'\nimport Main from './sites/main'\nimport JoinGame from './sites/join-game'\nimport Game from './model/game'\n\n/*\n *  Frontend flow: \n * \n * 1. user first opens this app in the browser. \n * 2. a screen appears asking the user to send their friend their game URL to start the game.\n * 3. the user sends their friend their game URL\n * 4. the user clicks the 'start' button and waits for the other player to join. \n * 5. As soon as the other player joins, the game starts. \n * \n * \n * Other player flow:\n * 1. user gets the link sent by their friend\n * 2. user clicks on the link and it redirects to their game. If the 'host' has not yet \n *    clicked the 'start' button yet, the user will wait for when the host clicks the start button.  \n *    If the host decides to leave before they click on the \"start\" button, the user will be notified\n *    that the host has ended the session. \n * 3. Once the host clicks the start button or the start button was already clicked on\n *    before, that's when the game starts. \n * Onboarding screen =====> Game start. \n * \n * Every time a user opens our site from the '/' path, a new game instance is automatically created\n * on the back-end. We should generate the uuid on the frontend, send the request with the uuid\n * as a part of the body of the request. If any player leaves, then the other player wins automatically.  \n * \n */\n\n\nfunction App() {\n\tconst [didRedirect, setDidRedirect] = React.useState(false);\n\n\tconst playerDidRedirect = React.useCallback(() => {\n\t\tsetDidRedirect(true);\n\t}, []);\n\n\tconst playerDidNotRedirect = React.useCallback(() => {\n\t\tsetDidRedirect(false);\n\t}, []);\n\n\tconst [userName, setUserName] = React.useState('');\n\n\treturn (\n\t<ColorContext.Provider value = {{didRedirect: didRedirect, playerDidRedirect: playerDidRedirect, playerDidNotRedirect: playerDidNotRedirect}}>\n\t\t<Router>\n\t\t<Switch>\n\t\t\t<Route path = \"/\" exact>\n\t\t\t\t<Main setUserName = {setUserName}/>\n\t\t\t</Route>\n\t\t\t<Route path = \"/game/:gameid\" exact>\n\t\t\t\t{didRedirect ? \n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<JoinGame userName = {userName} isHost = {true} />\n\t\t\t\t\t<Game myUserName = {userName} isHost = {true} />\n\t\t\t\t</React.Fragment>\n\t\t\t\t:\n\t\t\t\t<JoinRoom />}\n\t\t\t</Route>\n\t\t\t<Redirect to = \"/\" />\n\t\t</Switch>\n\t\t</Router>\n\t</ColorContext.Provider>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import io from 'socket.io-client';\n\nconst port = process.env.PORT || 8000;\n// const url = process.env.URL || `localhost:${port}`;\nconst url = 'https://game-nexus-rps.herokuapp.com';\n\nconst socket = io(url);\n\nlet mySocketId;\n\nsocket.on('createNewGame', status => {\n\tconsole.log(\"A new game has been created! Username: \" + status.userName + \", Game id: \" + status.gameId + \" Socket id: \" + status.mySocketId);\n\tmySocketId = status.mySocketId;\n})\n\nexport {\n\tsocket,\n\tmySocketId\n};\n"],"sourceRoot":""}