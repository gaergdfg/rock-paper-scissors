{"version":3,"sources":["sites/join-game.js","model/game.js","cookie-manager.js","sites/join-room.js","context/color-context.js","sites/main.js","App.js","reportWebVitals.js","index.js","connections/socket.js"],"names":["socket","require","JoinGame","props","gameid","userName","isHost","idData","gameId","emit","JoinGameRoom","useParams","style","textAlign","port","process","PORT","url","URL","Game","state","host","choiceHost","choiceGuest","scoreHost","scoreGuest","winner","this","setState","console","log","on","choice","updateGameState","alert","window","location","href","class","onClick","choose","bind","React","Component","GameWrapper","useState","setOpponentSocketId","opponentDidJoinTheGame","didJoinGame","opponentUserName","setUserName","gameSessionDoesNotExist","doesntExist","useEffect","statusUpdate","mySocketId","id","myUserName","socketId","data","Fragment","display","marginTop","String","innerHeight","marginLeft","innerWidth","width","height","onFocus","event","target","select","value","type","readOnly","cookies","Cookies","axios","JoinRoom","didGetUserName","username","inputEmail","inputPassword","inputText","typingEmail","typedText","email","current","typingPassword","password","typingUserName","textArea","createRef","ref","onInput","className","disabled","length","post","hubUrl","passwordHash","sha1","then","response","set","path","catch","err","ColorContext","createContext","didRedirect","playerDidRedirect","playerDidNotRedirect","CreateNewGame","send","newGameRoomId","uuid","to","a","roomId","Main","color","useContext","App","setDidRedirect","useCallback","Provider","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","io","status"],"mappings":"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","file":"static/js/main.1c7487c0.chunk.js","sourcesContent":["import React from 'react'\nimport { useParams } from 'react-router-dom'\n\nconst socket  = require('../connections/socket').socket;\n\n/**\n * 'Join game' is where we actually join the game room. \n */\n\n\nconst JoinGameRoom = (gameid, userName, isHost) => {\n\t/**\n\t * For this browser instance, we want \n\t * to join it to a gameRoom. For now\n\t * assume that the game room exists \n\t * on the backend. \n\t *  \n\t * \n\t * TODO: handle the case when the game room doesn't exist. \n\t */\n\tconst idData = {\n\t\tgameId : gameid,\n\t\tuserName : userName,\n\t\tisHost: isHost\n\t};\n\tsocket.emit(\"playerJoinGame\", idData);\n}\n\n\nconst JoinGame = (props) => {\n\t/**\n\t * Extract the 'gameId' from the URL. \n\t * the 'gameId' is the gameRoom ID. \n\t */\n\tconst { gameid } = useParams();\n\tJoinGameRoom(gameid, props.userName, props.isHost);\n\n\treturn <div>\n\t\t<h1 style = {{textAlign: \"center\"}}>Rock, paper, scissors</h1>\n\t</div>\n}\n\nexport default JoinGame;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst socket = require('../connections/socket').socket;\n\nconst port = process.env.PORT || 8000;\nconst url = process.env.URL || `localhost:${port}`;\n//const url = 'https://game-nexus-rps.herokuapp.com';\n\n\nclass Game extends React.Component {\n\tstate = {\n\t\thost: this.props.isHost,\n\n\t\tchoiceHost: -1,\n\t\tchoiceGuest: -1,\n\n\t\tscoreHost: 0,\n\t\tscoreGuest: 0,\n\t\t\n\t\twinner: 'nobody'\n\t}\n\n\tupdateGameState() {\n\t\tif(this.state.choiceGuest == this.state.choiceHost) {\n\t\t\tthis.setState({\n\t\t\t\twinner: 'draw'\n\t\t\t});\n\t\t} else if(this.state.choiceGuest == 1 && this.state.choiceHost == 0) {\n\t\t\tthis.setState({\n\t\t\t\twinner: 'Guest'\n\t\t\t});\n\t\t\tthis.setState({\n\t\t\t\tscoreGuest: this.state.scoreGuest + 1\n\t\t\t});\n\t\t} else if(this.state.choiceGuest == 2 && this.state.choiceHost == 1) {\n\t\t\tthis.setState({\n\t\t\t\twinner: 'Guest'\n\t\t\t});\n\t\t\tthis.setState({\n\t\t\t\tscoreGuest: this.state.scoreGuest + 1\n\t\t\t});\n\t\t} else if(this.state.choiceGuest == 0 && this.state.choiceHost == 2) {\n\t\t\tthis.setState({\n\t\t\t\twinner: 'Guest'\n\t\t\t});\n\t\t\tthis.setState({\n\t\t\t\tscoreGuest: this.state.scoreGuest + 1\n\t\t\t});\n\t\t} else if(this.state.choiceGuest == 0 && this.state.choiceHost == 1) {\n\t\t\tthis.setState({\n\t\t\t\twinner: 'Host'\n\t\t\t});\n\t\t\tthis.setState({\n\t\t\t\tscoreHost: this.state.scoreHost + 1\n\t\t\t});\n\t\t} else if(this.state.choiceGuest == 1 && this.state.choiceHost == 2) {\n\t\t\tthis.setState({\n\t\t\t\twinner: 'Host'\n\t\t\t});\n\t\t\tthis.setState({\n\t\t\t\tscoreHost: this.state.scoreHost + 1\n\t\t\t});\n\t\t} else if(this.state.choiceGuest == 2 && this.state.choiceHost == 0) {\n\t\t\tthis.setState({\n\t\t\t\twinner: 'Host'\n\t\t\t});\n\t\t\tthis.setState({\n\t\t\t\tscoreHost: this.state.scoreHost + 1\n\t\t\t});\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log('props:', this.props);\n\t\tconsole.log(this.state);\n\t\tthis.setState({\n\t\t\tisHost: this.props.isHost\n\t\t});\n\n\t\tsocket.on(\"hostMove\", choice => {\n\t\t\tconsole.log(\"hostMoveEvent\", choice);\n\t\t\tconsole.log(this.state.isHost);\n\t\t\tif(!this.state.isHost) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tchoiceHost: choice\n\t\t\t\t});\n\t\t\t}\n\t\t\tif(this.state.choiceGuest != -1 && this.state.choiceHost != -1) {\n\t\t\t\tconsole.log(this.state)\n\t\t\t\t\n\t\t\t\tthis.updateGameState();\n\n\t\t\t\talert('winner: ' + this.state.winner);\n\t\t\t\tif(this.scoreGuest == 5) {\n\t\t\t\t\tconsole.log('moron')\n\t\t\t\t\twindow.location.href = \"/guestWin.html\";\n\t\t\t\t} else if(this.scoreHost == 5) {\n\t\t\t\t\tconsole.log('moron2')\n\t\t\t\t\twindow.location.href = \"/hostWin.html\";\n\t\t\t\t}\n\t\t\t\tthis.setState({\n\t\t\t\t\twinner: 'nobody',\n\t\t\t\t\tchoiceGuest: -1, \n\t\t\t\t\tchoiceHost: -1\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\n\t\tsocket.on(\"guestMove\", choice => {\n\t\t\tconsole.log(\"guestMoveEvent\", choice);\n\t\t\tconsole.log(this.state.isHost);\n\t\t\tif(this.state.isHost) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tchoiceGuest: choice\n\t\t\t\t});\n\t\t\t}\n\t\t\tif(this.state.choiceGuest != -1 && this.state.choiceHost != -1) {\n\t\t\t\tconsole.log(this.state)\n\t\t\t\tif(this.state.choiceGuest == this.state.choiceHost) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\twinner: 'draw'\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.updateGameState();\n\n\t\t\t\talert('winner: ' + this.state.winner);\n\t\t\t\tif(this.scoreGuest == 5) {\n\t\t\t\t\tconsole.log('moron')\n\t\t\t\t\twindow.location.href = \"/guestWin.html\";\n\t\t\t\t}\n\t\t\t\telse if(this.scoreHost == 5) {\n\t\t\t\t\tconsole.log('moron2')\n\t\t\t\t\twindow.location.href = \"/hostWin.html\";\n\t\t\t\t}\n\t\t\t\tthis.setState({\n\t\t\t\t\twinner: 'nobody',\n\t\t\t\t\tchoiceGuest: -1, \n\t\t\t\t\tchoiceHost: -1\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t\t\n\t}\n\t\n\n\trender() {\n\t\treturn (\n\t\t\t<div class=\"box\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t<button onClick={this.choose.bind(this, this.state.host, 0)}>rock</button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t<button onClick={this.choose.bind(this, this.state.host, 1)}>paper</button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t<button onClick={this.choose.bind(this, this.state.host, 2)}>scissors</button>\n\t\t\t\t</div>\n\t\t\t\tHost:\n\t\t\t\t<div>\n\t\t\t\t<output>{this.state.choiceHost}</output>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t<output>{this.state.scoreHost}</output>\n\t\t\t\t</div>\n\t\t\t\tGuest:\n\t\t\t\t<div>\n\t\t\t\t<output>{this.state.choiceGuest}</output>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t<output>{this.state.scoreGuest}</output>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\t\n\t/**\n\t * Passes information about player's choice to the game.\n\t * @param {boolean} isHost \n\t * @param {0|1|2} choice (0 - rock), (1 - paper), (2 - scissors).\n\t */\n\tchoose(isHost, choice) {\n\t\tif (isHost) {    \n\t\t\tthis.setState({\n\t\t\t\tchoiceHost: choice\n\t\t\t});\n\t\t\tsocket.emit(\"new host move\", {choice: choice, gameId: this.props.gameId});\n\t\t\tconsole.log(\"inH\");\n\t\t}\n\t\telse {\n\t\t\tthis.setState({\n\t\t\t\tchoiceGuest: choice\n\t\t\t});\n\t\t\tsocket.emit(\"new guest move\", {choice: choice, gameId: this.props.gameId});\n\t\t\tconsole.log(\"inG\");\n\t\t}\n\t}\n}\t\n\nconst GameWrapper = (props) => {\n\t/**\n\t * player 1\n\t *      - socketId 1\n\t *      - socketId 2 ???\n\t * player 2\n\t *      - socketId 2\n\t *      - socketId 1\n\t */\n\n\n\n\t// const color = React.useContext(ColorContext);\n\tconst { gameid } = useParams();\n\tconst [opponentSocketId, setOpponentSocketId] = React.useState('');\n\tconst [opponentDidJoinTheGame, didJoinGame] = React.useState(false);\n\tconst [opponentUserName, setUserName] = React.useState('');\n\tconst [gameSessionDoesNotExist, doesntExist] = React.useState(false);\n\t\n\tconsole.log(props.isHost);\n\n\tReact.useEffect(() => {\n\t\tsocket.on(\"playerJoinedRoom\", statusUpdate => {\n\t\t\tconsole.log(\n\t\t\t\t\"A new player has joined the room! Username: \" +\n\t\t\t\tstatusUpdate.userName + \", Game id: \" + statusUpdate.gameId + \" Socket id: \" + statusUpdate.mySocketId\n\t\t\t);\n\t\t\tif (socket.id !== statusUpdate.mySocketId) {\n\t\t\t\tsetOpponentSocketId(statusUpdate.mySocketId);\n\t\t\t}\n\t\t})\n\n\t\tsocket.on(\"status\", statusUpdate => {\n\t\t\tconsole.log(statusUpdate);\n\t\t\talert(statusUpdate);\n\t\t\tif (statusUpdate === 'This game session does not exist.' || statusUpdate === 'There are already 2 people playing in this room.') {\n\t\t\t\tdoesntExist(true);\n\t\t\t}\n\t\t})\n\t\t\n\t\t\n\n\t\tsocket.on('start game', (opponentUserName) => {\n\t\t\tconsole.log(\"START!\");\n\t\t\tif (opponentUserName !== props.myUserName) {\n\t\t\t\tsetUserName(opponentUserName);\n\t\t\t\tdidJoinGame(true);\n\t\t\t} else {\n\t\t\t\t// in chessGame, pass opponentUserName as a prop and label it as the enemy. \n\t\t\t\t// in chessGame, use reactContext to get your own userName\n\t\t\t\t// socket.emit('myUserName')\n\t\t\t\tsocket.emit('request username', gameid);\n\t\t\t}\n\t\t})\n\n\n\t\tsocket.on('give userName', (socketId) => {\n\t\t\tif (socket.id !== socketId) {\n\t\t\t\tconsole.log(\"give userName stage: \" + props.myUserName);\n\t\t\t\tsocket.emit('recieved userName', {userName: props.myUserName, gameId: gameid});\n\t\t\t}\n\t\t})\n\n\t\tsocket.on('get Opponent UserName', (data) => {\n\t\t\tif (socket.id !== data.socketId) {\n\t\t\t\tsetUserName(data.userName);\n\t\t\t\tconsole.log('data.socketId: data.socketId');\n\t\t\t\tsetOpponentSocketId(data.socketId);\n\t\t\t\tdidJoinGame(true);\n\t\t\t}\n\t\t})\n\t}, []);\n\n\n\treturn (\n\t\t<React.Fragment>\n\t\t{opponentDidJoinTheGame ? (\n\t\t\t<div>\n\t\t\t<h4> Opponent: {opponentUserName} </h4>\n\t\t\t<div style={{ display: \"flex\" }}>\n\t\t\t\t<Game gameId={gameid} isHost={props.isHost}/>\n\t\t\t</div>\n\t\t\t<h4> You: {props.myUserName} </h4>\n\t\t\t</div>\n\t\t) : gameSessionDoesNotExist ? (\n\t\t\t<div>\n\t\t\t<h1 style={{ textAlign: \"center\", marginTop: \"200px\" }}> :( </h1>\n\t\t\t</div>\n\t\t) : (\n\t\t\t<div>\n\t\t\t<h1\n\t\t\t\tstyle={{\n\t\t\t\ttextAlign: \"center\",\n\t\t\t\tmarginTop: String(window.innerHeight / 8) + \"px\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tHey <strong>{props.myUserName}</strong>, copy and paste the URL\n\t\t\t\tbelow to send to your friend:\n\t\t\t</h1>\n\t\t\t<textarea\n\t\t\t\tstyle={{ marginLeft: String((window.innerWidth / 2) - 290) + \"px\", marginTop: \"30px\", width: \"580px\", height: \"30px\"}}\n\t\t\t\tonFocus={(event) => {\n\t\t\t\t\tevent.target.select();\n\t\t\t\t}}\n\t\t\t\tvalue = {url + \"/game/\" + gameid}\n\t\t\t\ttype = \"text\"\n\t\t\t\treadOnly = {true}>\n\t\t\t\t</textarea>\n\t\t\t<br></br>\n\n\t\t\t<h1 style={{ textAlign: \"center\", marginTop: \"100px\" }}>\n\t\t\t\t{\" \"}\n\t\t\t\tWaiting for other opponent to join the game...{\" \"}\n\t\t\t</h1>\n\t\t\t</div>\n\t\t)}\n\t\t</React.Fragment>\n\t);\n};\n\nexport default GameWrapper\n","import Cookies from 'universal-cookie';\nconst cookies = new Cookies();\nexport {cookies};\n","import React from 'react';\nimport JoinGame from './join-game';\nimport Game from '../model/game';\nimport sha1 from 'sha1';\nimport { cookies } from '../cookie-manager';\n\nconst axios = require('axios');\n\n\nconst hubUrl = 'https://game-nexus.herokuapp.com/';\n\n\n/**\n * Onboard is where we create the game room.\n */\n\nclass JoinRoom extends React.Component {\n\tstate = {\n\t\tdidGetUserName: false,\n\t\tusername: '',\n\t\tinputEmail: '',\n\t\tinputPassword: '',\n\t\tinputText: ''\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.email = React.createRef();\n\t\tthis.password = React.createRef();\n\n\t\tthis.textArea = React.createRef();\n\t}\n\n\ttypingEmail = () => {\n\t\t// grab the input text from the field from the DOM \n\t\tconst typedText = this.email.current.value\n\t\t\n\t\t// set the state with that text\n\t\tthis.setState({\n\t\t\tinputEmail: typedText\n\t\t})\n\t}\n\n\ttypingPassword = () => {\n\t\t// grab the input text from the field from the DOM \n\t\tconst typedText = this.password.current.value\n\t\t\n\t\t// set the state with that text\n\t\tthis.setState({\n\t\t\tinputPassword: typedText\n\t\t})\n\t}\n\n\ttypingUserName = () => {\n\t\t// grab the input text from the field from the DOM \n\t\tconst typedText = this.textArea.current.value\n\t\t\n\t\t// set the state with that text\n\t\tthis.setState({\n\t\t\tinputText: typedText\n\t\t})\n\t}\n\n    render() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t{\n\t\t\t\tthis.state.didGetUserName ? \n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<JoinGame userName = {this.state.username} isHost = {false}/>\n\t\t\t\t\t<Game myUserName = {this.state.username} isHost = {false}/>\n\t\t\t\t</React.Fragment>\n\t\t\t:\n\t\t\t\t<div>\n\t\t\t\t\t<h1 style={{textAlign: \"center\", marginTop: String((window.innerHeight / 3)) + \"px\"}}>Log in:</h1>\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{marginLeft: String((window.innerWidth / 2) - 120) + \"px\", width: \"240px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tref={this.email}\n\t\t\t\t\t\tonInput={this.typingEmail}></input>\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{marginLeft: String((window.innerWidth / 2) - 120) + \"px\", width: \"240px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tref={this.password}\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tonInput={this.typingPassword}></input>\n\n\t\t\t\t\t<button className=\"btn btn-primary\" \n\t\t\t\t\t\tstyle = {{marginLeft: String((window.innerWidth / 2) - 60) + \"px\", width: \"120px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tdisabled = {!(this.state.inputEmail.length > 0 && this.state.inputPassword.length > 0)} \n\t\t\t\t\t\tonClick = {() => {\n\t\t\t\t\t\t\tconsole.log('logging in');\n\t\t\t\t\t\t\taxios.post(hubUrl + 'api/v1/validate/', {\n\t\t\t\t\t\t\t\temail: this.state.inputEmail,\n\t\t\t\t\t\t\t\tpasswordHash: sha1(this.state.inputPassword)\n\t\t\t\t\t\t\t}).then(response => {\n\t\t\t\t\t\t\t\tconsole.log('got response:', response);\n\t\t\t\t\t\t\t\tcookies.set('username', response.data.username.username, { path: '/' });\n\t\t\t\t\t\t\t\t// TODO: remove this cookie right as the game ends\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tusername: response.data.username.username,\n\t\t\t\t\t\t\t\t\tdidGetUserName: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}).catch(err => {\n\t\t\t\t\t\t\t\talert('Invalid credentials!');\n\t\t\t\t\t\t\t\tconsole.log('got error:', err.response);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}}>Submit</button>\n\n\n\t\t\t\t\t<h1 style={{textAlign: \"center\", marginTop: String((window.innerHeight / 3)) + \"px\"}}>Play as guest:</h1>\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{marginLeft: String((window.innerWidth / 2) - 120) + \"px\", width: \"240px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tref = {this.textArea}\n\t\t\t\t\t\tonInput = {this.typingUserName}></input>\n\n\t\t\t\t\t<button className=\"btn btn-primary\" \n\t\t\t\t\t\tstyle = {{marginLeft: String((window.innerWidth / 2) - 60) + \"px\", width: \"120px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tdisabled = {!(this.state.inputText.length > 0)} \n\t\t\t\t\t\tonClick = {() => {\n\t\t\t\t\t\t\t// When the 'Submit' button gets pressed from the username screen,\n\t\t\t\t\t\t\t// We should send a request to the server to create a new room with\n\t\t\t\t\t\t\t// the uuid we generate here.\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tusername: this.state.inputText,\n\t\t\t\t\t\t\t\tdidGetUserName: true\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}}>Submit</button>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t</React.Fragment>\n\t\t);\n    }\n}\n\nexport default JoinRoom;\n","import { createContext } from 'react'\n\nexport const ColorContext = createContext({\n    didRedirect: false, \n    playerDidRedirect: () => {}, \n    playerDidNotRedirect: () => {}\n});\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport uuid from 'uuid/v4';\nimport { ColorContext } from '../context/color-context';\nimport sha1 from 'sha1';\nimport { cookies } from '../cookie-manager';\n\nconst socket = require('../connections/socket').socket;\nconst axios = require('axios');\n\n\nconst hubUrl = 'https://game-nexus.herokuapp.com/';\n\n/**\n * Main is where we create the game room.\n */\n\nclass CreateNewGame extends React.Component {\n\tstate = {\n\t\tdidGetUserName: false,\n\t\tinputEmail: '',\n\t\tinputPassword: '',\n\t\tinputText: '',\n\t\tgameId: ''\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.email = React.createRef();\n\t\tthis.password = React.createRef();\n\n\t\tthis.textArea = React.createRef();\n\t}\n\n\tsend = () => {\n\t\t/**\n\t\t * This method should create a new room in the '/' namespace\n\t\t * with a unique identifier. \n\t\t */\n\t\tconst newGameRoomId = uuid();\n\n\t\t// emit an event to the server to create a new room \n\t\tsocket.emit('createNewGame', newGameRoomId);\n\n\t\treturn newGameRoomId;\n\t}\n\n\ttypingEmail = () => {\n\t\t// grab the input text from the field from the DOM \n\t\tconst typedText = this.email.current.value\n\t\t\n\t\t// set the state with that text\n\t\tthis.setState({\n\t\t\tinputEmail: typedText\n\t\t})\n\t}\n\n\ttypingPassword = () => {\n\t\t// grab the input text from the field from the DOM \n\t\tconst typedText = this.password.current.value\n\t\t\n\t\t// set the state with that text\n\t\tthis.setState({\n\t\t\tinputPassword: typedText\n\t\t})\n\t}\n\n\ttypingUserName = () => {\n\t\t// grab the input text from the field from the DOM \n\t\tconst typedText = this.textArea.current.value;\n\t\t\n\t\t// set the state with that text\n\t\tthis.setState({\n\t\t\tinputText: typedText\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t{\n\t\t\t\tthis.state.didGetUserName ?\n\n\t\t\t\t<Redirect to = {\"/game/\" + this.state.gameId}/>\n\n\t\t\t:\n\n\t\t\t\t<div>\n\t\t\t\t\t<h1 style={{textAlign: \"center\", marginTop: String((window.innerHeight / 3)) + \"px\"}}>Log in:</h1>\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{marginLeft: String((window.innerWidth / 2) - 120) + \"px\", width: \"240px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tref = {this.email}\n\t\t\t\t\t\tonInput = {this.typingEmail}></input>\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{marginLeft: String((window.innerWidth / 2) - 120) + \"px\", width: \"240px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tref = {this.password}\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tonInput = {this.typingPassword}></input>\n\n\t\t\t\t\t<button className=\"btn btn-primary\" \n\t\t\t\t\t\tstyle = {{marginLeft: String((window.innerWidth / 2) - 60) + \"px\", width: \"120px\", marginTop: \"62px\"}} \n\t\t\t\t\t\tdisabled = {!(this.state.inputEmail.length > 0 && this.state.inputPassword.length > 0)} \n\t\t\t\t\t\tonClick = {async () => {\n\t\t\t\t\t\t\tconsole.log('logging in');\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst response = await axios.post(hubUrl + 'api/v1/validate/', {\n\t\t\t\t\t\t\t\t\temail: this.state.inputEmail,\n\t\t\t\t\t\t\t\t\tpasswordHash: sha1(this.state.inputPassword)\n\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t\tconsole.log('got response:', response.data.username.username);\n\t\t\t\t\t\t\t\tcookies.set('username', response.data.username.username, { path: '/' });\n\t\t\t\t\t\t\t\t// TODO: remove this cookie right as the game ends\n\t\t\t\t\t\t\t\tthis.props.didRedirect();\n\t\t\t\t\t\t\t\tthis.props.setUserName(response.data.username.username);\n\t\t\t\t\t\t\t\tlet roomId = this.send();\n\n\t\t\t\t\t\t\t\t// set the state of this component with the gameId so that we can\n\t\t\t\t\t\t\t\t// redirect the user to that URL later. \n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tdidGetUserName: true,\n\t\t\t\t\t\t\t\t\tgameId: roomId\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\talert('Invalid credentials!');\n\t\t\t\t\t\t\t\tconsole.log('got error:', err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}>Submit</button>\n\n\t\t\t\t\t<h1 style={{textAlign: \"center\", marginTop: String((window.innerHeight / 3)) + \"px\"}}>Play as guest:</h1>\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{marginLeft: String((window.innerWidth / 2) - 120) + \"px\", width: \"240px\", marginTop: \"62px\"}}\n\t\t\t\t\t\tref = {this.textArea}\n\t\t\t\t\t\tonInput = {this.typingUserName}></input>\n\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\tstyle = {{marginLeft: String((window.innerWidth / 2) - 60) + \"px\", width: \"120px\", marginTop: \"62px\"}}\n\t\t\t\t\t\tdisabled = {!(this.state.inputText.length > 0)}\n\t\t\t\t\t\tonClick = {() => {\n\t\t\t\t\t\t\t// When the 'Submit' button gets pressed from the username screen,\n\t\t\t\t\t\t\t// We should send a request to the server to create a new room with\n\t\t\t\t\t\t\t// the uuid we generate here.\n\t\t\t\t\t\t\tthis.props.didRedirect();\n\t\t\t\t\t\t\tthis.props.setUserName(this.state.inputText);\n\t\t\t\t\t\t\tlet roomId = this.send();\n\n\t\t\t\t\t\t\t// set the state of this component with the gameId so that we can\n\t\t\t\t\t\t\t// redirect the user to that URL later. \n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tdidGetUserName: true,\n\t\t\t\t\t\t\t\tgameId: roomId\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}>Submit</button>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nconst Main = (props) => {\n    const color = React.useContext(ColorContext);\n\n    return <CreateNewGame didRedirect = {color.playerDidRedirect} setUserName = {props.setUserName}/>\n}\n\n\nexport default Main;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport JoinRoom from './sites/join-room'\nimport { ColorContext } from './context/color-context'\nimport Main from './sites/main'\nimport JoinGame from './sites/join-game'\nimport Game from './model/game'\n\n/*\n *  Frontend flow: \n * \n * 1. user first opens this app in the browser. \n * 2. a screen appears asking the user to send their friend their game URL to start the game.\n * 3. the user sends their friend their game URL\n * 4. the user clicks the 'start' button and waits for the other player to join. \n * 5. As soon as the other player joins, the game starts. \n * \n * \n * Other player flow:\n * 1. user gets the link sent by their friend\n * 2. user clicks on the link and it redirects to their game. If the 'host' has not yet \n *    clicked the 'start' button yet, the user will wait for when the host clicks the start button.  \n *    If the host decides to leave before they click on the \"start\" button, the user will be notified\n *    that the host has ended the session. \n * 3. Once the host clicks the start button or the start button was already clicked on\n *    before, that's when the game starts. \n * Onboarding screen =====> Game start. \n * \n * Every time a user opens our site from the '/' path, a new game instance is automatically created\n * on the back-end. We should generate the uuid on the frontend, send the request with the uuid\n * as a part of the body of the request. If any player leaves, then the other player wins automatically.  \n * \n */\n\n\nfunction App() {\n\tconst [didRedirect, setDidRedirect] = React.useState(false);\n\n\tconst playerDidRedirect = React.useCallback(() => {\n\t\tsetDidRedirect(true);\n\t}, []);\n\n\tconst playerDidNotRedirect = React.useCallback(() => {\n\t\tsetDidRedirect(false);\n\t}, []);\n\n\tconst [userName, setUserName] = React.useState('');\n\n\treturn (\n\t<ColorContext.Provider value = {{didRedirect: didRedirect, playerDidRedirect: playerDidRedirect, playerDidNotRedirect: playerDidNotRedirect}}>\n\t\t<Router>\n\t\t<Switch>\n\t\t\t<Route path = \"/\" exact>\n\t\t\t\t<Main setUserName = {setUserName}/>\n\t\t\t</Route>\n\t\t\t<Route path = \"/game/:gameid\" exact>\n\t\t\t\t{didRedirect ? \n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<JoinGame userName = {userName} isHost = {true} />\n\t\t\t\t\t<Game myUserName = {userName} isHost = {true} />\n\t\t\t\t</React.Fragment>\n\t\t\t\t:\n\t\t\t\t<JoinRoom />}\n\t\t\t</Route>\n\t\t\t<Redirect to = \"/\" />\n\t\t</Switch>\n\t\t</Router>\n\t</ColorContext.Provider>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import io from 'socket.io-client';\n\nconst port = process.env.PORT || 8000;\nconst url = process.env.URL || `localhost:${port}`;\n// const url = 'https://game-nexus-rps.herokuapp.com';\n\nconst socket = io(url);\n\nlet mySocketId;\n\nsocket.on('createNewGame', status => {\n\tconsole.log(\"A new game has been created! Username: \" + status.userName + \", Game id: \" + status.gameId + \" Socket id: \" + status.mySocketId);\n\tmySocketId = status.mySocketId;\n})\n\nexport {\n\tsocket,\n\tmySocketId\n};\n"],"sourceRoot":""}